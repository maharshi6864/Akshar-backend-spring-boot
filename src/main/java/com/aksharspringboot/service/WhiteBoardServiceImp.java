package com.aksharspringboot.service;

import com.aksharspringboot.dto.LectureDto;
import com.aksharspringboot.dto.Response;
import com.aksharspringboot.dto.WhiteBoardDto;
import com.aksharspringboot.model.*;
import com.aksharspringboot.repository.LectureRepository;
import com.aksharspringboot.repository.WhiteBoardRepository;
import jakarta.transaction.Transactional;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Service
@Transactional
public class WhiteBoardServiceImp implements WhiteBoardService {

    @Autowired
    private S3Service s3Service;

    @Autowired
    private WhiteBoardRepository whiteBoardRepository;

    @Autowired
    private LectureRepository lectureRepository;

    @Override
    public Response saveNotes(WhiteBoardDto whiteBoardDto) {
        try {
            // Generate a unique filename using the current timestamp
            String fileName = "notes/" + System.currentTimeMillis() + ".svg";

            // Convert SVG content to bytes and input stream
            byte[] svgBytes = whiteBoardDto.getSvgContent().getBytes(StandardCharsets.UTF_8);
            InputStream svgInputStream = new ByteArrayInputStream(svgBytes);

            // Upload the SVG to S3
            boolean isUploaded = s3Service.uploadFileToS3(fileName, svgInputStream, svgBytes.length);

            if (isUploaded) {
                // Retrieve the lecture by ID
                LectureVo lectureVo = this.lectureRepository.findById(whiteBoardDto.getLectureId())
                        .orElseThrow(() -> new IllegalArgumentException("Lecture not found for ID: " + whiteBoardDto.getLectureId()));

                // Create TeacherVo object
                TeacherVo teacherVo = new TeacherVo(whiteBoardDto.getTeacherId(), null, null, null, null, null);

                // Check if the teacher exists (assumed to be the case, you may need to adjust this)
                if (teacherVo.getId() == null) {
                    throw new IllegalArgumentException("Teacher ID cannot be null");
                }

                // Create SectionVo object from saved lecture (assuming it has a section)
                SectionVo sectionVo = lectureVo.getSectionVo(); // Assuming SectionVo is part of LectureVo
                if (sectionVo == null || sectionVo.getId() == null) {
                    throw new IllegalArgumentException("Section ID cannot be null");
                }

                // Create WhiteBoardVo object with all necessary data
                WhiteBoardVo whiteBoardVo = new WhiteBoardVo(
                        null, // ID will be generated by MongoDB
                        whiteBoardDto.getNotesName(),
                        whiteBoardDto.getTime(),
                        fileName,
                        lectureVo, // Ensure this has a valid ID
                        teacherVo, // Ensure this has a valid ID
                        sectionVo // Pass the retrieved sectionVo
                );

                // Save the WhiteBoardVo to the database
                WhiteBoardVo savedWhiteboard = this.whiteBoardRepository.save(whiteBoardVo);

                return new Response("Notes saved successfully", savedWhiteboard, true);
            } else {
                return new Response("Failed to upload image to S3", whiteBoardDto, false);
            }

        } catch (Exception e) {
            e.printStackTrace(); // Log the error stack trace for debugging
            return new Response("An error occurred while saving the image: " + e.getMessage(), whiteBoardDto, false);
        }
    }

    @Override
    public Response downloadNotes(LectureDto lectureDto) {
        try{
            LectureVo lectureVo=this.lectureRepository.findAllById(lectureDto.getId()).get(0);
            List<WhiteBoardVo> whiteBoardVoList=this.whiteBoardRepository.findByLectureVo(new LectureVo(lectureVo.getId(),null,0,0,false,null,null,null,null,null,null));
            List<String> imagePaths=new ArrayList<>();
            for(WhiteBoardVo whiteBoardVo:whiteBoardVoList)
            {
                imagePaths.add(whiteBoardVo.getFilePath());
            }
            byte[] imageZipFile=this.s3Service.zipSvgFiles(imagePaths);
            return new Response("Images found", Map.of("notesZipFile",imageZipFile),true);
        }catch (Exception e)
        {
            e.printStackTrace();
            return new Response("Images Not found", null,true);
        }
    }

}
